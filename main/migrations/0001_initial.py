# Generated by Django 3.2.13 on 2023-10-13 08:53

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import main.models.notification.example_notification
import main.models.notification.example_rating_notification
import main.models.notification.student_example_notification
import main.models.notification.student_notification
import main.models.notification.student_tip_notification
import main.models.notification.tip_notification
import main.models.notification.tip_rating_notification
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('taggit', '0003_taggeditem_add_unique_index'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(max_length=255, unique=True, verbose_name='username')),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='email address')),
                ('first_name', models.CharField(blank=True, max_length=30)),
                ('last_name', models.CharField(blank=True, max_length=150)),
                ('is_active', models.BooleanField(default=True)),
                ('role', models.IntegerField(choices=[(1, 'Administrator User'), (2, 'Educator Shadow'), (3, 'Educator Content Expert'), (5, 'Experimental Teacher'), (4, 'Guest'), (6, 'Manager')], default=2)),
                ('is_team_lead', models.BooleanField(default=False)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('professional_goal', models.TextField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
        ),
        migrations.CreateModel(
            name='Episode',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('description', models.TextField(verbose_name='Description')),
                ('description_html', models.TextField(blank=True, null=True, verbose_name='HTML Description of the episode')),
                ('description_ids', models.TextField(blank=True, null=True, verbose_name='HTML Description IDS of the episode')),
                ('transcript_html', models.TextField(blank=True, null=True, verbose_name='HTML Transcript of the episode')),
                ('transcript', models.TextField(blank=True, null=True, verbose_name='Transcript')),
                ('transcript_ids', models.TextField(blank=True, null=True, verbose_name='HTML Transcript IDS of the episode')),
                ('is_active', models.BooleanField(default=True)),
                ('date', models.DateTimeField()),
                ('full', models.BooleanField(default=False, verbose_name='Fully entered in grid')),
                ('landmark', models.BooleanField(default=False, verbose_name='landmark episode')),
                ('heads_up', models.TextField(blank=True, null=True, verbose_name='Heads Up')),
                ('heads_up_json', models.JSONField(null=True, verbose_name='Heads Up')),
                ('practitioner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='contributed_episodes', to=settings.AUTH_USER_MODEL, verbose_name='Educator that contributed the episode')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Example',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('description', models.TextField(verbose_name='Description of the example')),
                ('example_type', models.CharField(choices=[('ANECDOTAL_EXAMPLE', 'Example (Anecdotal)'), ('HIGH_FREQUENCY_EXAMPLE', 'High Frequency Example (testing by CFC)')], default='ANECDOTAL_EXAMPLE', max_length=60, verbose_name='Example type')),
                ('context_notes', models.TextField(blank=True, default='', null=True, verbose_name='Context notes')),
                ('sounds_like', models.TextField(blank=True, default='', null=True, verbose_name='Sounds like')),
                ('looks_like', models.TextField(blank=True, default='', null=True, verbose_name='Looks like')),
                ('is_active', models.BooleanField(default=True)),
                ('goal', models.TextField(default='', verbose_name='Goal that motivated the example')),
                ('is_workflow_completed', models.BooleanField(default=True, verbose_name='Workflow completed')),
                ('is_bookmarked', models.BooleanField(default=False)),
                ('headline', models.CharField(max_length=255, verbose_name='Headline')),
                ('heading', models.CharField(max_length=255, verbose_name='Heading')),
                ('situation', models.TextField(null=True, verbose_name='Situation')),
                ('shadows_response', models.TextField(null=True, verbose_name='Shadows response')),
                ('outcome', models.TextField(null=True, verbose_name='Outcome')),
                ('added_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_examples', to=settings.AUTH_USER_MODEL, verbose_name='User that added example')),
                ('episode', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.episode')),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            bases=(models.Model, main.models.notification.example_notification.ExampleNotification),
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=30, unique=True, verbose_name='Organization Name')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('first_name', models.CharField(max_length=255, verbose_name='Given name')),
                ('last_name', models.CharField(max_length=255, verbose_name='Last name')),
                ('nickname', models.CharField(default='', max_length=255, verbose_name='Nickname')),
                ('is_active', models.BooleanField(default=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='')),
                ('visible_for_guest', models.BooleanField(default=False, verbose_name='Visible for guest')),
                ('added_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='student_added_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, main.models.notification.student_notification.StudentNotification),
        ),
        migrations.CreateModel(
            name='Timeline',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.TextField(verbose_name='Name')),
                ('is_default', models.BooleanField(default=False)),
                ('days', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Tip',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('state', models.CharField(choices=[('PAUSING', 'Pausing the Activity'), ('ENTERING', 'Entering the Activity'), ('SUSTAINING', 'Sustaining the Activity'), ('TRANSITIONING', 'Transitioning the Activity')], default='PAUSING', max_length=20, verbose_name='State of Play')),
                ('substate', models.CharField(choices=[('ACCOMMODATE', 'Accommodate'), ('REMEDIATE', 'Remediate')], default='ACCOMMODATE', max_length=20, verbose_name='Sub-State of Play')),
                ('levels', models.CharField(choices=[('1', 'From avoidance to tolerance'), ('2', 'From tolerance to proximity'), ('3', 'From proximity to interaction'), ('4', 'From interaction to flow'), ('5', 'From flow to planning')], default='1', max_length=20, verbose_name='The Five Levels')),
                ('title', models.CharField(max_length=255, verbose_name='Title of the tip')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description of the tip')),
                ('when', models.TextField(blank=True, null=True, verbose_name='When')),
                ('group_context', models.TextField(blank=True, null=True, verbose_name='Group context')),
                ('persuasive', models.TextField(blank=True, null=True, verbose_name='Persuasive of the tip')),
                ('howto', models.TextField(blank=True, null=True, verbose_name='How to')),
                ('helpful', models.TextField(blank=True, null=True, verbose_name='Helpful')),
                ('sub_goal', models.TextField(blank=True, null=True, verbose_name='Sub Goal')),
                ('related_tips', models.TextField(blank=True, null=True, verbose_name='Related Tips')),
                ('overarching_goal', models.TextField(blank=True, null=True, verbose_name='Overarching Goal')),
                ('child_context', models.JSONField(null=True)),
                ('child_context_flattened', models.TextField(blank=True, null=True)),
                ('environment_context', models.JSONField(null=True)),
                ('environment_context_flattened', models.TextField(blank=True, null=True)),
                ('note', models.TextField(default='', verbose_name='Change note')),
                ('marked_for_editing', models.BooleanField(default=False, verbose_name='Marked for editing')),
                ('helpful_count', models.IntegerField(default=0)),
                ('tip_summary', models.TextField(blank=True, null=True)),
                ('added_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='added_tips', to=settings.AUTH_USER_MODEL, verbose_name='User that added the tip')),
                ('linked_tips', models.ManyToManyField(blank=True, related_name='_main_tip_linked_tips_+', to='main.Tip')),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_tips', to=settings.AUTH_USER_MODEL, verbose_name='User that updated the tip')),
            ],
            bases=(models.Model, main.models.notification.tip_notification.TipNotification),
        ),
        migrations.CreateModel(
            name='TipRating',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('clarity', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)])),
                ('relevance', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)])),
                ('uniqueness', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)])),
                ('comment', models.TextField(default='')),
                ('commented_at', models.DateTimeField(blank=True, default=None, null=True)),
                ('read_count', models.IntegerField(default=0)),
                ('try_count', models.IntegerField(default=0)),
                ('try_comment', models.CharField(blank=True, default=None, max_length=200, null=True, verbose_name='Try Comment')),
                ('tried_at', models.DateTimeField(blank=True, default=None, null=True)),
                ('retry_later', models.BooleanField(default=True)),
                ('helpful_count', models.IntegerField(default=0)),
                ('added_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User that rated the tip')),
                ('student', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.student')),
                ('tip', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.tip')),
            ],
            bases=(models.Model, main.models.notification.tip_rating_notification.TipRatingNotification),
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('task_type', models.CharField(choices=[('EXAMPLE_TASK', 'Task with an example'), ('MISC_TASK', 'Task with short notes')], max_length=15, null=True, verbose_name='Task type')),
                ('info', models.TextField(verbose_name='Information')),
                ('reporter_note', models.TextField(null=True, verbose_name='Reporter note')),
                ('assignee_note', models.TextField(null=True, verbose_name='Assignee note')),
                ('added_by', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='added_task_set', to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.student', verbose_name='Student')),
                ('tip', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.tip', verbose_name='Tip to apply')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
        ),
        migrations.CreateModel(
            name='StudentTip',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('is_graduated', models.BooleanField(default=False, verbose_name='Is Graduated')),
                ('last_used_at', models.DateTimeField(null=True)),
                ('last_suggested_at', models.DateTimeField(null=True)),
                ('is_queued', models.BooleanField(default=False)),
                ('added_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='studenttip_added_by', to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.student')),
                ('tip', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.tip')),
            ],
            bases=(models.Model, main.models.notification.student_tip_notification.StudentTipNotification),
        ),
        migrations.CreateModel(
            name='StudentExample',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('reason', models.CharField(choices=[('EPISODE', 'Generated the example'), ('INCLUDED', 'Included by an educator'), ('INAPPROPRIATE', "It's inappropriate for the child"), ('GENERATED', 'This example was generated for the student')], max_length=15, verbose_name='State of Play')),
                ('is_active', models.BooleanField(default=True)),
                ('added_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('episode', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='main.episode')),
                ('example', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.example')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.student')),
            ],
            bases=(models.Model, main.models.notification.student_example_notification.StudentExampleNotification),
        ),
        migrations.AddField(
            model_name='student',
            name='examples',
            field=models.ManyToManyField(through='main.StudentExample', to='main.Example'),
        ),
        migrations.AddField(
            model_name='student',
            name='tags',
            field=taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='student',
            name='tips',
            field=models.ManyToManyField(through='main.StudentTip', to='main.Tip'),
        ),
        migrations.CreateModel(
            name='RoleAssignment',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.group')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.organization')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('usertype', models.CharField(choices=[('ADMIN', 'Administrator'), ('EDUCATOR_SHADOW', 'Educator Shadow'), ('EDUCATOR_CONTENT_EXPERT', 'Educator Content Expert'), ('GUEST', 'Guest'), ('PARENT', 'Parent')], default='EDUCATOR_SHADOW', max_length=25)),
                ('photo_width', models.IntegerField(default=0)),
                ('photo_height', models.IntegerField(default=0)),
                ('photo', models.ImageField(blank=True, default=None, height_field='photo_height', null=True, upload_to='', width_field='photo_width')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ExampleRating',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('clarity', models.FloatField(default=1, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)])),
                ('recommended', models.FloatField(default=1, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)], verbose_name='How likely to recommend to a colleague')),
                ('comment', models.TextField(default='')),
                ('added_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='User that rated the example')),
                ('example', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.example')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, main.models.notification.example_rating_notification.ExampleRatingNotification),
        ),
        migrations.AddField(
            model_name='example',
            name='tip',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.tip', verbose_name='Tip of this example'),
        ),
        migrations.AddField(
            model_name='example',
            name='updated_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_examples', to=settings.AUTH_USER_MODEL, verbose_name='User that updated example'),
        ),
        migrations.AddField(
            model_name='episode',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.student', verbose_name='Student for the episode'),
        ),
        migrations.AddField(
            model_name='episode',
            name='tags',
            field=taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='episode',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Educator that created the episode'),
        ),
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('read_tip', 'Read Tip'), ('try_tip', 'Try Tip'), ('comment_tip', 'Comment Tip'), ('rate_tip', 'Rate Tip'), ('create_tip', 'Create Tip'), ('update_tip', 'Update Tip'), ('suggest_tip', 'Suggest Tip'), ('set_tip_edit_mark', 'SET TIP EDIT MARK'), ('remove_tip_edit_mark', 'REMOVE TIP EDIT MARK'), ('attach_related_tips_with_tip', 'Attach Related Tips With Tip'), ('detach_related_tips_with_tip', 'Detach Related Tips With Tip'), ('attach_tip_with_example', 'Attach Tip With Example'), ('detach_tip_from_example', 'Detach Tip With Example'), ('create_example', 'Create Example'), ('update_example', 'Update Example'), ('rate_example', 'Rate Example'), ('create_episode', 'Create Episode'), ('update_episode', 'Update Episode'), ('assign_student', 'Assign Student'), ('unassign_student', 'Unassign Student'), ('create_student', 'Create Student'), ('assign_tip_to_student', 'Assign Tip To Student'), ('assign_example_to_student', 'Assign Example To Student'), ('rating_reminder', 'Rating Reminder')], max_length=30, verbose_name='Type')),
                ('meta', models.JSONField(null=True, verbose_name='Meta')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User that created the activity')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserStudentMapping',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('added_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='experimental_student', to='main.student', verbose_name='Student')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='experimental_user', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'unique_together': {('student', 'user')},
            },
        ),
        migrations.AddConstraint(
            model_name='tiprating',
            constraint=models.UniqueConstraint(fields=('added_by', 'tip', 'student'), name='unique_3_fields_together'),
        ),
        migrations.AddConstraint(
            model_name='tiprating',
            constraint=models.UniqueConstraint(condition=models.Q(('student__isnull', True)), fields=('added_by', 'tip', 'student'), name='unique_3_fields_together_with_conditions'),
        ),
        migrations.AlterUniqueTogether(
            name='tip',
            unique_together={('state', 'substate', 'levels', 'title')},
        ),
        migrations.AlterUniqueTogether(
            name='task',
            unique_together={('user', 'tip', 'student')},
        ),
        migrations.AlterUniqueTogether(
            name='studenttip',
            unique_together={('tip', 'student')},
        ),
        migrations.AlterUniqueTogether(
            name='studentexample',
            unique_together={('example', 'student')},
        ),
        migrations.AlterUniqueTogether(
            name='roleassignment',
            unique_together={('user', 'organization')},
        ),
        migrations.AlterUniqueTogether(
            name='example',
            unique_together={('tip', 'description')},
        ),
    ]
